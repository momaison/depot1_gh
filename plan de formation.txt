


1 - Comprendre Offre-Produit
2 - Architecture TMS
3 - Aget : techno
4 - Les serveurs : technique / fonctionnel
5 - Dev code -> Particularités de l'agent
6 - Tests utiles



En vrac réfléxions jm : 

- Je pense qu'on peut apprendre l'offre produit et des points techniques de front.





A propos de l'Agent : 

Point techniques méritant à mon avis un "cours" ou un "module de travail" (par module de travail, je pense à des pré projets à compléter par exemple pour que le formé touche une notion importante de l'agent : par exemple pour une familiarisation avec maven, on pourrait avoir un pré projet et demander que le formé compléte - seul - le projet pour réussir à fabrisuer un zip contenant tel ou tel fichier de sorte à ce qu'ils voit 60% de ce qu'on fait d'habitude lorsque l'on package les produits". ). Je marque solo quand je pense que le formé peut effectuer le travail de formation seul s'il a le bon support :


- redmine
- Arborescence des projets, organisation. ( svn )
- Maven : builds, pom, définition de versions de projets, packaging, lancement de tests unitaires ciblés sur une classe + module de travail(solo)
- Guice : utilisation de : module de travail (solo)
- Tests : JUNIT
- Pattern modèle vue présenteur : concepts et utilisation dans l'agent . Module de travail faisant travailler le passage d'événements dans l'event bus. (solo ?)
- JNA : scope d'utilisation dans l'agent, module de travail demandant à effectuer le mapping d'une dizaine de petites méthodes C pour se familiariser avec le tout. (il faut une dll qui va bien)
- Agent et serveur : web services, scénarios de contact du serveur
- Crypto : bases théoriques
- Crypto : bases avec java, providers, JCE, bouncyCastle
- PKCS11 avec JAVA : chargement de dll, limitations, intro sur le pkcs11 wrapper. Module d'apprentissage avec un petit projet demandant à effectuer le chargement d'un dll et une opération cryptoi ou ssl.
- tour de l'agent : Probes et objets cryptographique
- tour de l'agent : update flash (tâches ant, fonctionement global)
- tour de l'agent : update crypto 
- tour de l'agent : Scénarios de démarrage de l'agent selon les cas d'utilisation (solo si support approprié ? pas sûr)
- tour de l'agent : Spécificités propres à chaque token (solo si support approprié ?)



A propos du serveur : (propositions de Paul)
------------------------


Technologies
- servlet *
- soap *
- ejb (stateless seulement) *
- jpa/hibernate & DAOs

Architecture ( Le doc d'archi n'existe pas encore ... )
- point de vue fonctionnel : blocs / != serveurs ...
- point de vue technique
    - premier appercu par bloc fonctionnel : explication en couches
    - bloc par bloc détail des couches en partant du plus simple (ekBroker) vers
le plus complexe (ekDirectory)


Les points avec * peuvent être pratiqués sur des projets externes en solo sans
perdre trop de temps. Les autres nécessitent de la lecture de code avec
quelqu'un le connaissant. L'idéal pour ces derniers points serait de les
effectuer avec une modification à appliquer en tête, un "cas d'usage".

